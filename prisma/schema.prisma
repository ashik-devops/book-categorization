datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch","filterJson"]
  

}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String        @db.VarChar(32)
  middle_name  String?       @db.VarChar(32)
  last_name    String        @db.VarChar(32)
  email        String        @unique @db.VarChar(64)
  password     String        @db.VarChar(512)
  reset_token  String?       @db.VarChar(512)
  status       UserStatus    @default(ACTIVE)
  created_at   DateTime      @default(dbgenerated("CURRENT_TIMESTAMP"))
  updated_at   DateTime?
  tokens       Token[]
  role_id      String        @db.Uuid
  role         Role          @relation(fields: [role_id], references: [id])
  Files        Files[]
}
enum UserStatus {
  ACTIVE
  SUSPENDED
}

model Role {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label       String            @unique @db.VarChar(64)
  permissions RolePermissions[]
  users       User[]
}

model Token {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token      String    @unique @db.Text
  expires_at DateTime
  revoked_at DateTime?
  created_at DateTime  @default(dbgenerated("CURRENT_TIMESTAMP"))
  updated_at DateTime?
  user_id    String    @db.Uuid
  user       User      @relation(fields: [user_id], references: [id])
}
model Permission {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(127)
  entity          String            @db.VarChar(127)
  scope           String            @default("*") @db.VarChar(127)
  scope_attribute String            @default("*") @db.VarChar(127)
  roles           RolePermissions[]
}

model RolePermissions {
  role_id       String     @db.Uuid
  role          Role       @relation(fields: [role_id], references: [id])
  permission_id String     @db.Uuid
  permission    Permission @relation(fields: [permission_id], references: [id])
  assigned_at   DateTime   @default(dbgenerated("CURRENT_TIMESTAMP"))

  @@id([role_id, permission_id])
}
model Files {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(512)
  filepath   String    @unique @db.Text
  created_at DateTime  @default(dbgenerated("CURRENT_TIMESTAMP"))
  deleted_at DateTime?
  user_id    String?   @db.Uuid
  created_by User?     @relation(fields: [user_id], references: [id])
  obj_type   String?   @db.VarChar(1024)
  obj_id     String?   @db.Uuid
  file_type  String?   @db.VarChar(64)
  training_genre   String?   @db.VarChar(64)
}